How did viewing a diff between two versions of a file help you see the bug that was introduced?
    I do not need to find the bug line to line. It can be found faster and easilier.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I can easily control my code. I can know what new functions added to the new version, and I can 
    compare to the old version if I need to.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros: The idea is clear, I know why I commit at this time, and I can have a logical purpose.
    cons: If I foget to commit, or if the computer shut down before I do the commit, it will be a disaster. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Some version control systems, like Git, may affect other files if we make some changes in one file,
    while others, they may unlikely to affect each other.

How can you use the commands git log and git diff to view the history of files?

    git log to know the logical purpose of each changes, while git diff to find the exact code changes.

How might using version control make you more confident to make changes that
could break something?

    If I break my porgram after I made some code changes, I can resume to the previous one and find the bug.

Now that you have your workspace set up, what do you want to try using Git for?

    Coding....